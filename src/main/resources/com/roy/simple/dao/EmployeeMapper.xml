<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    接口式编程，动态与接口绑定
    namespace 为接口的全类名
-->
<mapper namespace="com.roy.simple.dao.EmployeeMapper">
    <!--
        eviction:缓存的回收策略，内容超出以后，把那些回收掉
            LRU（默认）-最近最少使用、FIFO-先进先出、SOFT-软引用、WEAK-弱引用
        flushInterval:缓存刷新间隔（毫秒）
            缓存多长时间清空一次，默认不清空
        readOnly:缓存是否只读，默认false
            true：只读 - mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据
                  mybatis为了加快获取速度，直接将数据在缓存中的引用交给用户，不安全、速度快
            false：非只读 - mybatis认为获取来的数据会被修改。
                   mybatis会利用序列化与反序列化技术，克隆一份新的数据

        size：缓存存放多少个元素
        type：指定自定义缓存的全类名
            实现org.apache.ibatis.cache.Cache接口即可；
    -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>

    <select id="getEmpById" resultType="com.roy.simple.model.Employee" useCache="true">
        SELECT * FROM tbl_employee where id = #{id}
    </select>

    <!--
        parameterType 可以省略
        useGeneratedKeys : 使用自增获取主键策略
        keyProperty="id" : 返回的自增主键存入JavaBean的哪个属性
    -->
    <insert id="addEmployee" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee (last_name,gender,email) values(#{lastName},#{gender}, #{email})
    </insert>

    <update id="updateEmployee">
        update tbl_employee
        set last_name = #{lastName},
            email = #{email},
            gender = #{gender}
        where id = #{id}
    </update>

    <delete id="deleteEmpById">
        DELETE from tbl_employee where id = #{id}
    </delete>

    <!--
        Employee getEmpByIdAndLastName(Integer id, String lastName);
        可以：select * from tbl_employee where id = #{arg0} and last_name = #{arg1}
            select * from tbl_employee where id = #{param1} and last_name = #{param2}
    -->
    <select id="getEmpByIdAndLastName" resultType="com.roy.simple.model.Employee">
        select * from tbl_employee where id = #{id} and last_name = #{lastName}
    </select>
    <!--Employee getEmpByMap(Map<String,Object> map);-->
    <select id="getEmpByMap" resultType="com.roy.simple.model.Employee">
        select * from tbl_employee where id = #{id} and last_name = #{lastName}
    </select>

    <!--List<Employee> getEmpList();-->
    <select id="getEmpList" resultType="com.roy.simple.model.Employee">
        select * from tbl_employee
    </select>
    
    <!--Map<String,Object> getEmpMapById(Integer id);-->
    <select id="getEmpMapById" resultType="map">
        select * from tbl_employee where id = #{id}
    </select>

    <!--Map<String,Employee> getEmpMaps();-->
    <select id="getEmpMaps" resultType="com.roy.simple.model.Employee">
        select * from tbl_employee
    </select>

    <!--public List<Employee> getEmpsByDeptId(Integer deptId);-->
    <select id="getEmpsByDeptId" resultType="com.roy.simple.model.Employee">
        select * from tbl_employee where dept_id = #{deptId}
    </select>


</mapper>